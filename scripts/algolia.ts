/**
 * This script is used to index the static docs HTML files generated by Next.js into Algolia.
 *
 * It's a migration from the Gatsby solution,
 * which relied on the `gatsby-plugin-algolia`: https://github.com/getsentry/sentry-docs/blob/3c1361bdcb23a0fcee1f3019bca7c14a5d632162/src/gatsby/utils/algolia.ts
 *
 * The record generation logic is reused as is, with *two* notable changes:
 *   1. We manually feed the HTML files to the record generation function
 *   2. We manually upload the records to Algolia
 *
 * This script is meant to be run on a GitHub Action (see `.github/workflows/algolia-index.yml`).
 *
 * If you want to run it locally,
 *   1. Make sure you have the required env vars set up
 *   2. be careful to change to `ALGOLIA_INDEX_PREFIX` to value different from `sentry-`
 *      to avoid nuking the production index
 *   3. Run a production build of the app before running this script
 */

import fs from 'fs';
import {join} from 'path';

import {extrapolate, htmlToAlgoliaRecord} from '@sentry-internal/global-search';
import algoliasearch from 'algoliasearch';

import {getDocsFrontMatter} from '../src/mdx';
import {FrontMatter} from '../src/types';

// This is the path to the static files generated by Next.js for the app directory
// The directory structure is not documented and could change in the future
// The ideal way to do this is probably to run production server and fetch the HTML from there.
const staticHtmlFilesPath = join(process.cwd(), '.next', 'server', 'app');

const ALGOLIA_APP_ID = process.env.ALGOLIA_APP_ID;
const ALGOLIA_API_KEY = process.env.ALGOLIA_API_KEY;
const ALGOLIA_INDEX_PREFIX = process.env.ALGOLIA_INDEX_PREFIX;

if (!ALGOLIA_APP_ID) {
  throw new Error('`ALGOLIA_APP_ID` env var must be configured in repo secrets');
}
if (!ALGOLIA_API_KEY) {
  throw new Error('`ALGOLIA_API_KEY` env var must be configured in repo secrets');
}
if (!ALGOLIA_INDEX_PREFIX) {
  throw new Error('`ALGOLIA_INDEX_PREFIX` env var must be configured in repo secrets');
}

const indexName = `${ALGOLIA_INDEX_PREFIX}docs`;
const client = algoliasearch(ALGOLIA_APP_ID, ALGOLIA_API_KEY);
const index = client.initIndex(indexName);

indexAndUpload();
async function indexAndUpload() {
  // the page front matters are the source of truth for the static doc routes
  // as they are used directly by generateStaticParams() on [[..path]] page
  const pageFrontMatters = await getDocsFrontMatter();
  const records = await generateAlogliaRecords(pageFrontMatters);
  // eslint-disable-next-line no-console
  console.log('ðŸ”¥ Generated %d Algolia records.', records.length);
  // eslint-disable-next-line no-console
  console.log('ðŸ”¥ Saving records ...');
  await index
    .saveObjects(records, {
      batchSize: 10000,
      autoGenerateObjectIDIfNotExist: true,
    })
    .then(result => {
      // eslint-disable-next-line no-console
      console.log('ðŸ”¥ Saved %d Algolia records', result.objectIDs.length);
    });
}

async function generateAlogliaRecords(pageFrontMatters: FrontMatter[]) {
  const records = await Promise.all(
    pageFrontMatters
      .filter(
        frontMatter => !frontMatter.draft && !frontMatter.noindex && frontMatter.title
      )
      .map(pageFm => {
        // eslint-disable-next-line no-console
        console.log('processing:', pageFm.slug);

        const htmlFile = join(staticHtmlFilesPath, pageFm.slug + '.html');
        const html = fs.readFileSync(htmlFile).toString();

        const pageRecords = htmlToAlgoliaRecord(
          html,
          {
            title: pageFm.title,
            url: '/' + pageFm.slug + '/',
            pathSegments: extrapolate(pageFm.slug, '/').map(x => `/${x}/`),
            keywords: pageFm.keywords,
          },
          '#main'
        );

        return pageRecords;
      })
  );

  return records.flat();
}
